import bifacial_radiance

testfolder = r'C:\Users\sarefeen\Documents\GitHub\bifacial_radiance\bifacial_radiance\TEMP\makeModTests'
demo = bifacial_radiance.RadianceObj('SimRowScan', testfolder) 

x = 2
y = 1
xgap = 0.02
ygap = 0.15
zgap = 0.10
numpanels = 1
offsetfromaxis = True
Ny = numpanels
axisofrotationTorqueTube = True
frameParams = None
omegaParams = None
diam = 0.1

module_type = 'TEST'
nMods = 5
nRows = 4
sceneDict = {'tilt':0, 'pitch':3, 'clearance_height':3,'azimuth':90, 'nMods': nMods, 'nRows': nRows} 

demo.setGround(0.2)
epwfile = demo.getEPW(lat = 37.5, lon = -77.6)
metdata = demo.readWeatherFile(epwfile, coerce_year = 2021)
demo.gendaylit(4020)

demo.makeModule(name=module_type,x=x, y=y, torquetube = True, 
                    diameter = diam, xgap = xgap, ygap = ygap, zgap = zgap, 
                    numpanels = Ny, frameParams=frameParams, omegaParams=omegaParams,
                    axisofrotationTorqueTube=axisofrotationTorqueTube)

scene = demo.makeScene(module_type,sceneDict)
octfile = demo.makeOct()
analysis = bifacial_radiance.AnalysisObj()  # return an analysis object including the scan dimensions for back irradiance
#frontscan, backscan = analysis.moduleAnalysis(scene, sensorsy=1) # Gives us the dictionaries with coordinates

rowWanted = 2
modWanted = 2
name = 'ScanTest'
sensorsy = 2
frontscan, backscan = analysis.moduleAnalysis(scene, sensorsy=sensorsy, modWanted = modWanted, rowWanted = rowWanted)

analysis.analysis(octfile, name, frontscan, backscan)

frontscan

resutest = analysis.analysis(octfile, name, frontscan, backscan)

resutest[0]

df_dict_row = {}
row_keys = ['x','y','z','rearZ','mattype','rearMat','Wm2Front','Wm2Back','Back/FrontRatio']
df_row = df_dict_row.fromkeys(row_keys)

df_row

import pandas as pd

df1 = pd.DataFrame(df_row, index = [0,1,2])

df1

dict_values = {'x': [1,2,3],
                 'y': [2,4,6],
                 'z': [3,3,3],
                 'rearZ': [2.9,3.1,2.5],
                 'mattype': ['Mat1','Mat1','Mat1'],
                 'rearMat': ['Mat2','Mat2','Mat2'],
                 'Wm2Front': [340,350,360],
                 'Wm2Back': [34,35,36],
                 'Back/FrontRatio': [0.1,0.2,0.3]}

df1.iloc[0] = dict_values

df1

name = 'RowTest'
sensorsy = 2
rowWanted = 2
rowscan = analysis.analyzeRow(name = name, scene = scene, sensorsy = sensorsy, rowWanted = rowWanted, nMods = nMods, octfile = octfile)

demo.data_sub

frontWM2


